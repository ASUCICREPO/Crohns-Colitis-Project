version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18
      python: 3.11
    commands:
      - echo "Cloning public repo..."
      - git clone https://github.com/ASUCICREPO/Crohns-Colitis-Project.git /tmp/repo
      - cp -r /tmp/repo/* .
      - echo "Installing AWS CDK CLI..."
      - npm install -g aws-cdk@2.161.1
      - cd Backend
      - npm install

  pre_build:
    commands:
      - npm run build
      - cdk bootstrap --require-approval never

  build:
    commands:
      - echo "=== PHASE 1 Backend Deployment ==="
      - echo "Deploying with SOURCE_EMAIL=$SOURCE_EMAIL and DESTINATION_EMAIL=$DESTINATION_EMAIL"
      - |
        if aws cloudformation describe-stacks --stack-name CrohnsColitisQBusinessStack --region $AWS_REGION >/dev/null 2>&1; then
          echo "Stack exists - updating existing stack..."
        else
          echo "Stack does not exist - creating new stack..."
        fi
      - cdk deploy CrohnsColitisQBusinessStack --require-approval never --parameters sourceEmail=$SOURCE_EMAIL --parameters destinationEmail=$DESTINATION_EMAIL --outputs-file outputs.json
      - echo "=== Extracting API endpoints ==="
      - cat outputs.json
      - export API_URL=$(cat outputs.json | jq -r '.CrohnsColitisQBusinessStack.ApiEndpoint // empty')
      - export CHAT_API_URL=$(cat outputs.json | jq -r '.CrohnsColitisQBusinessStack.ChatEndpoint // empty')
      - export EMAIL_API_URL=$(cat outputs.json | jq -r '.CrohnsColitisQBusinessStack.EmailEndpoint // empty')
      - export CONVERSATION_API_URL=$(cat outputs.json | jq -r '.CrohnsColitisQBusinessStack.ConversationEndpoint // empty')
      - export QBUSINESS_APP_ID=$(cat outputs.json | jq -r '.CrohnsColitisQBusinessStack.QBusinessApplicationId // empty')
      - echo "Chat API URL $CHAT_API_URL"
      - echo "Email API URL $EMAIL_API_URL"
      - echo "=== PHASE 2 Frontend Build ==="
      - cd ../frontend
      - echo "REACT_APP_CHAT_ENDPOINT=$CHAT_API_URL" > .env.production
      - echo "REACT_APP_EMAIL_ENDPOINT=$EMAIL_API_URL" >> .env.production
      - echo "REACT_APP_CONVERSATION_ENDPOINT=$CONVERSATION_API_URL" >> .env.production
      - echo "REACT_APP_APPLICATION_ID=$QBUSINESS_APP_ID" >> .env.production
      - echo "REACT_APP_REGION=$AWS_REGION" >> .env.production
      - npm install --legacy-peer-deps
      - npm install @csstools/normalize.css --legacy-peer-deps
      - npm run build
      - echo "Frontend build completed"
      - cd build
      - zip -r ../frontend-build.zip .
      - cd ..
      - ls -la frontend-build.zip
      - cd ../Backend

  post_build:
    commands:
      - echo "=== PHASE 3 Amplify Deployment ==="
      - AMPLIFY_APP_NAME="crohns-colitis-app-$(date +%s)"
      - AMPLIFY_BRANCH_NAME="main"
      - echo "Creating fresh Amplify app $AMPLIFY_APP_NAME..."
      - aws amplify create-app --name "$AMPLIFY_APP_NAME" --platform WEB > amplify-app.json
      - AMPLIFY_APP_ID=$(cat amplify-app.json | jq -r '.app.appId')
      - echo "Amplify App ID $AMPLIFY_APP_ID"
      - aws amplify create-branch --app-id "$AMPLIFY_APP_ID" --branch-name "$AMPLIFY_BRANCH_NAME" || echo "Branch may already exist"
      - echo "Uploading frontend build to S3..."
      - BUCKET_NAME="amplify-deploy-$(date +%s)"
      - aws s3 mb s3://$BUCKET_NAME
      - aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
      - aws s3 cp ../frontend/frontend-build.zip s3://$BUCKET_NAME/frontend-build.zip
      - aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{"Version":"2012-10-17","Statement":[{"Sid":"PublicReadGetObject","Effect":"Allow","Principal":"*","Action":"s3:GetObject","Resource":"arn:aws:s3:::'$BUCKET_NAME'/*"}]}'
      - echo "Deploying frontend build to Amplify..."
      - aws amplify start-deployment --app-id "$AMPLIFY_APP_ID" --branch-name "$AMPLIFY_BRANCH_NAME" --source-url "https://$BUCKET_NAME.s3.amazonaws.com/frontend-build.zip"
      - echo "=== Deployment Complete ==="
      - echo "Backend deployed successfully"
      - echo "Frontend Amplify URL https://$AMPLIFY_BRANCH_NAME.$AMPLIFY_APP_ID.amplifyapp.com"
      - echo "Chat API $CHAT_API_URL"
      - echo "Email API $EMAIL_API_URL"

artifacts:
  files:
    - outputs.json
    - amplify-app.json
    - frontend/frontend-build.zip
  name: crohns-colitis-deployment